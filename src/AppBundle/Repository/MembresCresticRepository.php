<?php

namespace AppBundle\Repository;

/**
 * MembresExterieursRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MembresCresticRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @return array
     */

    public function findAll()
    {
        return $this->findBy(array(), array('nom' => 'ASC', 'prenom' => 'ASC'));
    }

    public function findByLettre($lettre)
    {
        return $this->createQueryBuilder('m')
            ->where('m.nom LIKE :lettre')
            ->orWhere('m.nom LIKE :lettre2')
            ->andWhere('m.ancienMembresCrestic = false')
            ->setParameters(array('lettre'=> $lettre.'%', 'lettre2' => strtolower($lettre).'%'))
            ->orderBy('m.nom', 'ASC')
            ->getQuery()
            ->getResult();
    }

    public function findByExLettre($lettre)
    {
        return $this->createQueryBuilder('m')
            ->where('m.nom LIKE :lettre')
            ->orWhere('m.nom LIKE :lettre2')
            ->andWhere('m.ancienMembresCrestic = true')
            ->setParameters(array('lettre'=> $lettre.'%', 'lettre2' => strtolower($lettre).'%'))
            ->orderBy('m.nom', 'ASC')
            ->getQuery()
            ->getResult();
    }

    /**
     * @param null $array_options
     * @return \Doctrine\ORM\QueryBuilder|null
     */
    public function findAllMembresCresticBuilder($array_options = null)
    {
        $result = null;

        switch ($array_options['role'])
        {
            case 'ROLE_ADMINISTRATEUR':
            {
                $result =  $this->createQueryBuilder('a','a.id')
                                ->where('a.ancienMembresCrestic = false')
                                ->orderBy('a.nom', 'ASC');
                break;
            }

            case 'ROLE_RESPONSABLE':
            {
                $result =  $this->createQueryBuilder('a','a.id')
                                ->where('a.id = ?1 and a.ancienMembresCrestic = false')
                                ->orderBy('a.nom', 'ASC')
                                ->setParameter(1,$array_options['user_id']);
                break;
            }

            case 'ROLE_UTILISATEUR':
            {
                $result =  $this->createQueryBuilder('a','a.id')
                            ->where('a.id = ?1 and a.ancienMembresCrestic = false')
                            ->orderBy('a.nom', 'ASC')
                            ->setParameter(1,$array_options['user_id']);
                break;
            }

            case 'ROLE_VISITEUR':
            {
                $result =  $this->createQueryBuilder('a','a.id')
                    ->where('a.ancienMembresCrestic = false')
                    ->orderBy('a.nom', 'ASC');
                break;
            }

            default :
            {
                $result =  $this->createQueryBuilder('a','a.id')
                                ->where('a.ancienMembresCrestic = false')
                                ->orderBy('a.nom', 'ASC');
                break;
            }
        }

        return $result;
    }

    /**
     * @param null $array_options
     *
     * @return array
     */

    public function findAllMembresCrestic($array_options = null)
    {
        return $this->findAllMembresCresticBuilder($array_options)->getQuery()->getResult();
    }

    /**
     * @param $responsable
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function findAllMembresCresticResponsableBuilder($responsable)
    {
        return $this->createQueryBuilder('a','a.id')
            ->where('a.id = ?1 and a.ancienMembresCrestic = false')
            ->orderBy('a.nom', 'ASC')
            ->setParameter(1,$responsable->getId());
    }

    /**
     * @param $responsable
     * @return array
     */

    public function findAllMembresCresticResponsable($responsable)
    {
        return $this->findAllMembresCresticResponsableBuilder($responsable)->getQuery()->getResult();
    }

    /**
     * @return \Doctrine\ORM\QueryBuilder
     */

    public function findAllConseilLaboratoireBuilder()
    {
        return $this->createQueryBuilder('a','a.id')
            ->where('a.ancienMembresCrestic = false and a.membreConseilLabo = true')
            ->orderBy('a.nom', 'ASC');
    }

    /**
     * @return array
     */

    public function findAllConseilLaboratoire()
    {
        return $this->findAllConseilLaboratoireBuilder()->getQuery()->getResult();
    }

    /**
     * @return \Doctrine\ORM\QueryBuilder
     */

    public function findAllMembresBuilder()
    {
        return $this->createQueryBuilder('a','a.id')
            ->orderBy('a.nom', 'ASC');

    }

    /**
     * @return array
     */

    public function findAllMembres()
    {
        return $this->findAllMembresBuilder()->getQuery()->getResult();
    }


    /**
     * @return array
     */
    public function getArrayOfChoiceSelectMembresCresticAll()
    {
        $result = [];
        $array = $this->findAllMembres();
        foreach ($array as $key => $value)
        {
            $result['membreCrestic_'.$key] = $value;
        }

        return $result;
    }

    /**
     * @param $status
     * @return array
     */

    public function findAllMembresCresticStatus( $status )
    {
        return $this->findBy(array('status' => $status, 'ancienMembresCrestic' => false) , array('nom' => 'ASC', 'prenom' => 'ASC'));
    }

    /**
     * @return array
     */

    public function findAllMembresAncienCrestic()
    {
        return $this->findBy(array('ancienMembresCrestic' => true) , array('nom' => 'ASC', 'prenom' => 'ASC'));
    }

    /**
     * @param $status
     * @return array
     */

    public function findAllMembresAncienCresticStatus( $status )
    {
        return $this->findBy(array('status' => $status, 'ancienMembresCrestic' => true) , array('nom' => 'ASC', 'prenom' => 'ASC'));
    }

    public function getEquipeResponsableBuilder ()
    {
        return  $this->createQueryBuilder('a')->orderBy('a.nom', 'ASC');
    }

    public function getEquipeResponsable ()
    {
        return  $this->getEquipeResponsableBuilder()->getQuery()->getResult();
    }

    public function findAllNomMembreCresticBuilder ($nom)
    {
        return $this->createQueryBuilder('a','a.id')
            ->select ('a')
            ->where('a.ancienMembresCrestic = 0 AND a.nom LIKE :nom')
            ->setParameter('nom',"%".$nom."%");
    }

    public function findAllNomMembreCrestic ($nom)
    {
        return $this->findAllNomMembreCresticBuilder($nom)->getQuery()->getResult();
    }

    public function findMembreCresticBuilder ($data)
    {
        $qb = $this->createQueryBuilder('a','a.id');
        $qb->orderBy('a.nom', 'ASC');
        $qb->where('a.ancienMembresCrestic = 0');
        $nom = $data['nom'];
        if ($nom != '')
        {
            $qb->andWhere('a.nom LIKE :nom');
            $qb->setParameter('nom',"%".$nom."%");
        }

        $prenom = $data['prenom'];
        if ($prenom != '')
        {
            $qb->andWhere('a.prenom LIKE :prenom');
            $qb->setParameter('prenom',"%".$prenom."%");
        }

        $keywords = $data['keywords'];
        if ($keywords != '')
        {
            $qb->andWhere('a.url LIKE :keywords OR a.cv LIKE :keywords OR a.themes LIKE :keywords OR a.pointsForts LIKE :keywords OR a.responsabilitesScientifiques LIKE :keywords OR a.responsabilitesAdministratives LIKE :keywords OR a.valorisation LIKE :keywords  OR a.enseignements LIKE :keywords OR a.responsabiliteFonction LIKE :keywords');
            $qb->setParameter('keywords',"%".$keywords."%");
        }

        return $qb;
    }


    public function findMembreCrestic ($data)
    {
        return $this->findMembreCresticBuilder($data)->getQuery()->getResult();
    }

    public function findMembreAncienBuilder ($data)
    {
        $qb = $this->createQueryBuilder('a','a.id');
        $qb->orderBy('a.nom', 'ASC');
        $qb->where('a.ancienMembresCrestic = 1');
        $nom = $data['nom'];
        if ($nom != '')
        {
            $qb->andWhere('a.nom LIKE :nom');
            $qb->setParameter('nom',"%".$nom."%");
        }

        $prenom = $data['prenom'];
        if ($prenom != '')
        {
            $qb->andWhere('a.prenom LIKE :prenom');
            $qb->setParameter('prenom',"%".$prenom."%");
        }

        $keywords = $data['keywords'];
        if ($keywords != '')
        {
            $qb->andWhere('a.url LIKE :keywords OR a.cv LIKE :keywords OR a.themes LIKE :keywords OR a.pointsForts LIKE :keywords OR a.responsabilitesScientifiques LIKE :keywords OR a.responsabilitesAdministratives LIKE :keywords OR a.valorisation LIKE :keywords  OR a.enseignements LIKE :keywords OR a.responsabiliteFonction LIKE :keywords');
            $qb->setParameter('keywords',"%".$keywords."%");
        }

        return $qb;
    }


    public function findMembreAncien ($data)
    {
        return $this->findMembreAncienBuilder($data)->getQuery()->getResult();
    }


}
