<?php

namespace AppBundle\Repository;

use AppBundle\Entity\PublicationsHasEquipes;

/**
 * PublicationsHasEquipesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PublicationsHasEquipesRepository extends \Doctrine\ORM\EntityRepository
{
    public function findAllEquipesFromPublicationBuilder($id_publication)
    {
        return $this->createQueryBuilder('a','a.id')
            ->select ('a')
            ->where('a.publication = ?1')
            ->setParameter(1,$id_publication);
    }

    public function findAllEquipesFromPublication ($id_publication)
    {
        return $this->findAllEquipesFromPublicationBuilder($id_publication)->getQuery()->getResult();
    }

    public function getArrayIdFromPublicationEquipe ($id_publication)
    {
        $result = array();
        $array  =  $this->findAllEquipesFromPublication($id_publication);

        foreach ($array as $key=>$value)
        {
            if ($value->getEquipe() != null)
            {
                $id = $value->getEquipe()->getId();
                $result[] = $id;
            }
        }
        return $result;
    }

    public function findAllPublicationsFromEquipeBuilder($id_equipe)
    {
        return $this->createQueryBuilder('a','a.id')
            ->select ('a')
            ->innerJoin('a.publication', 'b')
            ->where('a.equipe = ?1')
            ->setParameter(1,$id_equipe)
            ->orderBy('b.anneePublication','DESC');
    }

    public function findAllPublicationsFromEquipe ($id_equipe)
    {
        return $this->findAllPublicationsFromEquipeBuilder($id_equipe)->getQuery()->getResult();
    }

    public function findLastPublicationsFromEquipeBuilder($id_equipe, $nb)
    {
        return $this->createQueryBuilder('a','a.id')
            ->select ('a')
            ->innerJoin('AppBundle:Publications', 'p', 'WITH', 'a.publication = p.id')
            ->where('a.equipe = ?1')
            ->setParameter(1, $id_equipe)
            ->orderBy('p.anneePublication, p.moisPublication', 'DESC')
            ->setMaxResults($nb);
    }

    public function findLastPublicationsFromEquipe ($id_equipe, $nb)
    {
        return $this->findLastPublicationsFromEquipeBuilder($id_equipe, $nb)->getQuery()->getResult();
    }

    public function findAllIdEquipes($idpublication)
    {
        $equipes = $this->findAllEquipesFromPublication($idpublication);
        $t =array();
        /** @var PublicationsHasEquipes $e */
        foreach ($equipes as $e)
        {
            $t[$e->getEquipe()->getId()] = $e;
        }

        return $t;
    }

    public function getArrayIdFromEquipePublications($idEquipe)
    {
        $result = array();
        $array  =  $this->findAllPublicationsFromEquipe($idEquipe);

        /** @var PublicationsHasEquipes $pub */
        foreach ($array as $pub)
        {
            if ($pub->getEquipe() !== null && $pub->getEquipe()->getId() == $idEquipe)
            {
                $result[$pub->getId()] = $pub->getPublication()->getAnneePublication();
            }
        }

        return $result;
    }

    public function updatePubli($old, $new)
    {
        $qb = $this->createQueryBuilder('u');
        $q = $qb->update( )
            ->set('u.publication', $new)
            ->where('u.publication = ?1')
            ->setParameter(1, $old)
            ->getQuery();
        $q->execute();
    }
}
